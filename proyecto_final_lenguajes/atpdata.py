# -*- coding: utf-8 -*-
"""atpData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XXNCSX7_ogWYzlutUl8Q91rlXFbavrt3
"""

import pandas as pd

atp_data_2007 = pd.read_csv("atp_matches_2007.csv", header=0)
atp_data_2011 = pd.read_csv("atp_matches_2011.csv", header=0)
atp_data_2015 = pd.read_csv("atp_matches_2015.csv", header=0)

def mas_victorias():

  player_data_2007 = atp_data_2007['winner_name'].value_counts().head(5)
  player_data_2011 = atp_data_2011['winner_name'].value_counts().head(5)
  player_data_2015 = atp_data_2015['winner_name'].value_counts().head(5)

  return player_data_2007, player_data_2011, player_data_2015

def primer_saque():

  # Calcular el porcentaje de puntos ganados con el primer saque para ganadores y perdedores
  atp_data_2007['winner_1st_won%'] = atp_data_2007['w_1stWon'] / atp_data_2007['w_1stIn']
  atp_data_2007['loser_1st_won%'] = atp_data_2007['l_1stWon'] / atp_data_2007['l_1stIn']

  # Crear un DataFrame combinado para análisis (ganadores y perdedores)
  winner_stats_2007 = atp_data_2007[['winner_name', 'winner_1st_won%']].rename(columns={'winner_name': 'player', 'winner_1st_won%': '1st_won%'})
  loser_stats_2007 = atp_data_2007[['loser_name', 'loser_1st_won%']].rename(columns={'loser_name': 'player', 'loser_1st_won%': '1st_won%'})

  # Crear un DataFrame combinado para análisis (ganadores y perdedores)
  combined_stats_2007 = pd.concat([winner_stats_2007, loser_stats_2007])

  # Agrupar por jugador y calcular el promedio del porcentaje de puntos ganados con el primer saque
  avg_1st_won_2007 = combined_stats_2007.groupby('player')['1st_won%'].mean().sort_values(ascending=False)

  top_players_2007 = avg_1st_won_2007.head(5)

  # lo mismo para año 2011
  atp_data_2011['winner_1st_won%'] = atp_data_2011['w_1stWon'] / atp_data_2011['w_1stIn']
  atp_data_2011['loser_1st_won%'] = atp_data_2011['l_1stWon'] / atp_data_2011['l_1stIn']

  winner_stats_2011 = atp_data_2011[['winner_name', 'winner_1st_won%']].rename(columns={'winner_name': 'player', 'winner_1st_won%': '1st_won%'})
  loser_stats_2011 = atp_data_2011[['loser_name', 'loser_1st_won%']].rename(columns={'loser_name': 'player', 'loser_1st_won%': '1st_won%'})

  combined_stats_2011 = pd.concat([winner_stats_2011, loser_stats_2011])

  avg_1st_won_2011 = combined_stats_2011.groupby('player')['1st_won%'].mean().sort_values(ascending=False)

  top_players_2011 = avg_1st_won_2011.head(5)

  # Lo mismo para año 2015
  atp_data_2015['winner_1st_won%'] = atp_data_2015['w_1stWon'] / atp_data_2015['w_1stIn']
  atp_data_2015['loser_1st_won%'] = atp_data_2015['l_1stWon'] / atp_data_2015['l_1stIn']

  winner_stats_2015 = atp_data_2015[['winner_name', 'winner_1st_won%']].rename(columns={'winner_name': 'player', 'winner_1st_won%': '1st_won%'})
  loser_stats_2015 = atp_data_2015[['loser_name', 'loser_1st_won%']].rename(columns={'loser_name': 'player', 'loser_1st_won%': '1st_won%'})

  combined_stats_2015 = pd.concat([winner_stats_2015, loser_stats_2015])

  avg_1st_won_2015 = combined_stats_2015.groupby('player')['1st_won%'].mean().sort_values(ascending=False)

  top_players_2015 = avg_1st_won_2015.head(5)

  return top_players_2007, top_players_2011, top_players_2015


def aces():

  #año 2007
  aces_by_player_2007 = atp_data_2007.groupby('winner_name')['w_ace'].sum().reset_index()

  # Ordenar los jugadores por la cantidad de aces, de mayor a menor
  aces_by_player_sorted_2007 = aces_by_player_2007.sort_values(by='w_ace', ascending=False)

  # Mostrar los jugadores con más aces
  top_aces_players_2007 = aces_by_player_sorted_2007.head(5)

  #año 2011
  aces_by_player_2011 = atp_data_2011.groupby('winner_name')['w_ace'].sum().reset_index()

  aces_by_player_sorted_2011 = aces_by_player_2011.sort_values(by='w_ace', ascending=False)

  top_aces_players_2011 = aces_by_player_sorted_2011.head(5)

  #año 2015
  aces_by_player_2015 = atp_data_2015.groupby('winner_name')['w_ace'].sum().reset_index()

  aces_by_player_sorted_2015 = aces_by_player_2015.sort_values(by='w_ace', ascending=False)

  top_aces_players_2015 = aces_by_player_sorted_2015.head(5)

  return top_aces_players_2007, top_aces_players_2011, top_aces_players_2015

def torneos_sets():
  # Contar el número de sets en cada fila (separados por espacios)
  atp_data_2007['sets_count'] = atp_data_2007['score'].apply(lambda x: len(x.split()) if isinstance(x, str) else 0)

  # Agrupar por torneo y sumar la cantidad de sets por cada torneo
  sets_per_tournament_2007 = atp_data_2007.groupby('tourney_name')['sets_count'].sum().reset_index()

  # Ordenar los torneos por la cantidad total de sets (de mayor a menor)
  sorted_tournaments_2007 = sets_per_tournament_2007.sort_values(by='sets_count', ascending=False)

  # año 2011
  atp_data_2011['sets_count'] = atp_data_2011['score'].apply(lambda x: len(x.split()) if isinstance(x, str) else 0)

  sets_per_tournament_2011 = atp_data_2011.groupby('tourney_name')['sets_count'].sum().reset_index()

  sorted_tournaments_2011 = sets_per_tournament_2011.sort_values(by='sets_count', ascending=False)

  # año 2015
  atp_data_2015['sets_count'] = atp_data_2015['score'].apply(lambda x: len(x.split()) if isinstance(x, str) else 0)

  sets_per_tournament_2015 = atp_data_2015.groupby('tourney_name')['sets_count'].sum().reset_index()

  sorted_tournaments_2015 = sets_per_tournament_2015.sort_values(by='sets_count', ascending=False)

  return sorted_tournaments_2007.head(5), sorted_tournaments_2011.head(5), sorted_tournaments_2015.head(5)

def surface_time():

  # Agrupar por superficie y calcular el tiempo promedio de los partidos en cada superficie
  avg_time_per_surface_2007 = atp_data_2007.groupby('surface')['minutes'].mean().reset_index()

  # Ordenar por tiempo promedio en minutos (de mayor a menor)
  sorted_surface_time_2007 = avg_time_per_surface_2007.sort_values(by='minutes', ascending=False)

  # 2011
  avg_time_per_surface_2011 = atp_data_2011.groupby('surface')['minutes'].mean().reset_index()

  sorted_surface_time_2011 = avg_time_per_surface_2011.sort_values(by='minutes', ascending=False)

  # 2015
  avg_time_per_surface_2015 = atp_data_2015.groupby('surface')['minutes'].mean().reset_index()

  sorted_surface_time_2015 = avg_time_per_surface_2015.sort_values(by='minutes', ascending=False)

  return sorted_surface_time_2007, sorted_surface_time_2011, sorted_surface_time_2015

def edad_vicortia():
  player_data_2007 = atp_data_2007['winner_age'].value_counts().head(5)
  player_data_2011 = atp_data_2011['winner_age'].value_counts().head(5)
  player_data_2015 = atp_data_2015['winner_age'].value_counts().head(5)

  return player_data_2007, player_data_2011, player_data_2015

def zurdo():
    # Contar el total de partidos (tanto ganados como perdidos)
    total_matches_2007 = atp_data_2007.shape[0]
    total_matches_2011 = atp_data_2011.shape[0]
    total_matches_2015 = atp_data_2015.shape[0]

    # Contar los partidos jugados por los zurdos y diestros en 2007
    left_matches_2007 = atp_data_2007[(atp_data_2007['winner_hand'] == 'L') | (atp_data_2007['loser_hand'] == 'L')].shape[0]
    right_matches_2007 = atp_data_2007[(atp_data_2007['winner_hand'] == 'R') | (atp_data_2007['loser_hand'] == 'R')].shape[0]

    # Contar victorias de zurdos y diestros en 2007
    left_wins_2007 = atp_data_2007[atp_data_2007['winner_hand'] == 'L'].shape[0]
    right_wins_2007 = atp_data_2007[atp_data_2007['winner_hand'] == 'R'].shape[0]

    # Calcular el porcentaje de victorias de los zurdos y diestros
    left_win_percentage_2007 = (left_wins_2007 / left_matches_2007) * 100 if left_matches_2007 > 0 else 0
    right_win_percentage_2007 = (right_wins_2007 / right_matches_2007) * 100 if right_matches_2007 > 0 else 0

    # Crear DataFrame para 2007
    results_df_2007 = pd.DataFrame({
        'Handedness': ['Left'],
        'Matches Played': [left_matches_2007],
        'Wins': [left_wins_2007],
        'Win Percentage': [left_win_percentage_2007]
    })

    # Repetir lo mismo para 2011
    left_matches_2011 = atp_data_2011[(atp_data_2011['winner_hand'] == 'L') | (atp_data_2011['loser_hand'] == 'L')].shape[0]
    right_matches_2011 = atp_data_2011[(atp_data_2011['winner_hand'] == 'R') | (atp_data_2011['loser_hand'] == 'R')].shape[0]

    left_wins_2011 = atp_data_2011[atp_data_2011['winner_hand'] == 'L'].shape[0]
    right_wins_2011 = atp_data_2011[atp_data_2011['winner_hand'] == 'R'].shape[0]

    left_win_percentage_2011 = (left_wins_2011 / left_matches_2011) * 100 if left_matches_2011 > 0 else 0
    right_win_percentage_2011 = (right_wins_2011 / right_matches_2011) * 100 if right_matches_2011 > 0 else 0

    results_df_2011 = pd.DataFrame({
        'Handedness': ['Left'],
        'Matches Played': [left_matches_2011],
        'Wins': [left_wins_2011],
        'Win Percentage': [left_win_percentage_2011]
    })

    # Repetir lo mismo para 2015
    left_matches_2015 = atp_data_2015[(atp_data_2015['winner_hand'] == 'L') | (atp_data_2015['loser_hand'] == 'L')].shape[0]
    right_matches_2015 = atp_data_2015[(atp_data_2015['winner_hand'] == 'R') | (atp_data_2015['loser_hand'] == 'R')].shape[0]

    left_wins_2015 = atp_data_2015[atp_data_2015['winner_hand'] == 'L'].shape[0]
    right_wins_2015 = atp_data_2015[atp_data_2015['winner_hand'] == 'R'].shape[0]

    left_win_percentage_2015 = (left_wins_2015 / left_matches_2015) * 100 if left_matches_2015 > 0 else 0
    right_win_percentage_2015 = (right_wins_2015 / right_matches_2015) * 100 if right_matches_2015 > 0 else 0

    results_df_2015 = pd.DataFrame({
        'Handedness': ['Left'],
        'Matches Played': [left_matches_2015],
        'Wins': [left_wins_2015],
        'Win Percentage': [left_win_percentage_2015]
    })

    return results_df_2007, results_df_2011, results_df_2015


def menu():
    while True:
        print("\nElige una opción:")
        print("1. Jugadores con más victorias")
        print("2. Jugadores con el promedio más alto de puntos ganados con el primer saque")
        print("3. Jugadores con mas aces")
        print("4. Torneos con mas numeros de sets")
        print("5. Superficie donde tardan mas los partidos")
        print("6. ¿los ganadores suelen ser más jóvenes o de mejor ranking?")
        print("7. ¿Ser zurdo te hace mejor?")
        print("8. Salir")

        opcion = input("Ingrese el número de la opción: ")

        if opcion == '1':

          resultados = mas_victorias()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nJugadores con más victorias en {year_data}:")
              display(resultados[idx])

        elif opcion == '2':

          resultados = primer_saque()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nJugadores con el promedio más alto de puntos ganados con el primer saque en {year_data}:")
              display(resultados[idx])

        elif opcion == '3':
          resultados = aces()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nJugadores con mas aces en {year_data}:")
              display(resultados[idx])

        elif opcion == '4':
          resultados = torneos_sets()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nJugadores con mas aces en {year_data}:")
              display(resultados[idx])

        elif opcion == '5':
          resultados = surface_time()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nSuperficie donde tardan mas los partidos en {year_data}:")
              display(resultados[idx])

        elif opcion == '6':
          resultados = edad_vicortia()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nVictorias en relacion con la edad en {year_data}:")
              display(resultados[idx])

        elif opcion == '7':
          resultados = zurdo()
          for idx, year_data in enumerate(["2007", "2011", "2015"]):
              print(f"\nVictorias de zurdos en {year_data}:")
              display(resultados[idx])

        elif opcion == '8':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida. Intente de nuevo.")

menu()