# -*- coding: utf-8 -*-
"""Proyecto de Aula Lenguajes de Programacion Daniel Romero.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h0EAHwtNmpTvxT4qK6sqomU1iheITavh

1. Carga y limpia los datos iniciales
2.  Pregunta 1: ¿Quiénes son los profesionales mejor pagados de la ciudad?
    Analiza los 5 empleados con mayores ingresos totales.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
def cargar_datos(archivo: str) -> pd.DataFrame:

    df = pd.read_csv(archivo)


    df = df.drop(['Id', 'Notes', 'Agency', 'Status'], axis=1)
    df['BasePay'] = pd.to_numeric(df['BasePay'], errors='coerce')
    df['TotalPayBenefits'] = pd.to_numeric(df['TotalPayBenefits'], errors='coerce')
    df['EmployeeName'] = df['EmployeeName'].replace('Not provided', np.nan)

    return df


df = cargar_datos('Salaries.csv')
print("Datos cargados exitosamente!")

def pregunta_1_mejores_pagados(df: pd.DataFrame) -> None:

    print("\n=== PREGUNTA 1: PROFESIONALES MEJOR PAGADOS ===")

    mejores_pagados = df.nlargest(5, 'TotalPayBenefits')[
        ['EmployeeName', 'JobTitle', 'TotalPayBenefits', 'BasePay']
    ]

    for _, empleado in mejores_pagados.iterrows():
        print(f"Empleado: {empleado['EmployeeName']}")
        print(f"Cargo: {empleado['JobTitle']}")
        print(f"Salario Total: ${empleado['TotalPayBenefits']:,.2f}")
        print(f"Salario Base: ${empleado['BasePay']:,.2f}")
        print("-" * 50)

# Ejecutar análisis 1
pregunta_1_mejores_pagados(df)

"""Pregunta 2: ¿Cómo han evolucionado los salarios a lo largo de los años?"""

def pregunta_2_evolucion_salarial(df: pd.DataFrame) -> None:
    print("\n=== PREGUNTA 2: EVOLUCIÓN DE SALARIOS ===")

    evolucion = df.groupby('Year').agg({
        'BasePay': ['mean', 'median'],
        'TotalPayBenefits': ['mean', 'median']
    }).round(2)

    for year in evolucion.index:
        print(f"\nAño: {year}")
        print(f"Salario Base Promedio: ${evolucion.loc[year, ('BasePay', 'mean')]:,.2f}")
        print(f"Salario Total Promedio: ${evolucion.loc[year, ('TotalPayBenefits', 'mean')]:,.2f}")
        print(f"Mediana Salario Base: ${evolucion.loc[year, ('BasePay', 'median')]:,.2f}")
        print(f"Mediana Salario Total: ${evolucion.loc[year, ('TotalPayBenefits', 'median')]:,.2f}")


    plt.figure(figsize=(12, 6))


    plt.plot(evolucion.index, evolucion[('BasePay', 'mean')],
             marker='o', label='Base Pay (Mean)', linewidth=2)
    plt.plot(evolucion.index, evolucion[('BasePay', 'median')],
             marker='s', label='Base Pay (Median)', linewidth=2)
    plt.plot(evolucion.index, evolucion[('TotalPayBenefits', 'mean')],
             marker='^', label='Total Pay (Mean)', linewidth=2)
    plt.plot(evolucion.index, evolucion[('TotalPayBenefits', 'median')],
             marker='D', label='Total Pay (Median)', linewidth=2)


    plt.title('Evolución de Salarios por Año', pad=20, size=14)
    plt.xlabel('Año', size=12)
    plt.ylabel('Salario ($)', size=12)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')


    def format_func(value, tick_number):
        return f'${value/1000:.0f}K'

    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(format_func))


    plt.tight_layout()


    plt.show()


pregunta_2_evolucion_salarial(df)

"""Pregunta 3: ¿Cuáles son los departamentos más grandes y mejor pagados?"""

def pregunta_3_departamentos(df: pd.DataFrame) -> None:
   print("\n=== PREGUNTA 3: ANÁLISIS DE DEPARTAMENTOS ===")


   dept_stats = df.groupby('JobTitle').agg({
       'EmployeeName': 'count',
       'TotalPayBenefits': ['mean', 'median']
   }).round(2)


   dept_stats_size = dept_stats.sort_values(('EmployeeName', 'count'), ascending=False).head(5)


   print("Top 5 departamentos más grandes:")
   for dept in dept_stats_size.index:
       print(f"\nDepartamento: {dept}")
       print(f"Número de empleados: {dept_stats_size.loc[dept, ('EmployeeName', 'count')]}")
       print(f"Salario promedio: ${dept_stats_size.loc[dept, ('TotalPayBenefits', 'mean')]:,.2f}")


   plt.figure(figsize=(12, 6))


   departamentos = dept_stats_size.index
   empleados = dept_stats_size[('EmployeeName', 'count')]


   bars = plt.bar(departamentos, empleados)


   plt.title('Top 5 Departamentos por Número de Empleados', pad=20, size=14)
   plt.xlabel('Departamento', size=12)
   plt.ylabel('Número de Empleados', size=12)


   plt.xticks(rotation=45, ha='right')


   for bar in bars:
       height = bar.get_height()
       plt.text(bar.get_x() + bar.get_width()/2., height,
               f'{int(height):,}',
               ha='center', va='bottom')


   plt.tight_layout()


   plt.show()

# Ejecutar análisis
pregunta_3_departamentos(df)

"""Pregunta 4: ¿Cuál es la diferencia entre salario base y total por cargo?
    Se analizan los beneficios adicionales al salario base.
"""

def pregunta_4_diferencia_salarial(df: pd.DataFrame) -> None:
    print("\n=== PREGUNTA 4: DIFERENCIA SALARIAL ===")

    df['DiferenciaSalarial'] = df['TotalPayBenefits'] - df['BasePay']

    top_diferencias = df.nlargest(5, 'DiferenciaSalarial')[
        ['JobTitle', 'BasePay', 'TotalPayBenefits', 'DiferenciaSalarial']
    ]

    print("Cargos con mayores beneficios adicionales:")
    for _, cargo in top_diferencias.iterrows():
        print(f"\nCargo: {cargo['JobTitle']}")
        print(f"Salario Base: ${cargo['BasePay']:,.2f}")
        print(f"Salario Total: ${cargo['TotalPayBenefits']:,.2f}")
        print(f"Beneficios Adicionales: ${cargo['DiferenciaSalarial']:,.2f}")

# Ejecutar análisis 4
pregunta_4_diferencia_salarial(df)

"""Pregunta 5: ¿Cómo se distribuyen los salarios en diferentes rangos?
    Se hace el analisis la distribución salarial por rangos.
"""

def pregunta_5_distribucion_salarial(df: pd.DataFrame) -> None:
    print("\n=== PREGUNTA 5: DISTRIBUCIÓN DE SALARIOS ===")

    rangos = [0, 50000, 100000, 150000, 200000, float('inf')]
    labels = ['0-50k', '50k-100k', '100k-150k', '150k-200k', '200k+']

    df['RangoSalarial'] = pd.cut(df['TotalPayBenefits'], bins=rangos, labels=labels)
    distribucion = df['RangoSalarial'].value_counts().sort_index()
    porcentajes = (distribucion / len(df) * 100).round(2)

    print("Distribución de salarios:")
    for rango, cantidad in distribucion.items():
        print(f"\nRango: {rango}")
        print(f"Cantidad de empleados: {cantidad}")
        print(f"Porcentaje: {porcentajes[rango]}%")


        ejemplos = df[df['RangoSalarial'] == rango]['JobTitle'].unique()[:3]
        print("Ejemplos de trabajos en este rango:")
        for trabajo in ejemplos:
            print(f"- {trabajo}")

# Ejecutar análisis 5
pregunta_5_distribucion_salarial(df)